// Mocks generated by Mockito 5.1.0 from annotations
// in mc_crud_test/test/crud_customer/data/repository/customer_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mc_crud_test/core/failure/customer_failure/customer_failure.dart'
    as _i5;
import 'package:mc_crud_test/features/crud_customer/data/data_sources/data_sources.dart'
    as _i3;
import 'package:mc_crud_test/features/crud_customer/domain/entities/customer_entity/customer.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [DataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSource extends _i1.Mock implements _i3.DataSource {
  MockDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>> createCustomer(
          {_i6.Customer? customer}) =>
      (super.noSuchMethod(
              Invocation.method(#createCustomer, [], {#customer: customer}),
              returnValue:
                  Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>.value(
                      _FakeEither_0<_i5.CustomerFailure, _i6.Customer>()))
          as _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>);
  @override
  _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>> findCustomer(
          {String? email}) =>
      (super.noSuchMethod(Invocation.method(#findCustomer, [], {#email: email}),
              returnValue:
                  Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>.value(
                      _FakeEither_0<_i5.CustomerFailure, _i6.Customer>()))
          as _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>);
  @override
  _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>> deleteCustomer(
          {String? email}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteCustomer, [], {#email: email}),
              returnValue:
                  Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>.value(
                      _FakeEither_0<_i5.CustomerFailure, _i6.Customer>()))
          as _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>);
  @override
  _i4.Future<_i2.Either<_i5.CustomerFailure, List<_i6.Customer>>>
      getAllCustomers() => (super.noSuchMethod(
          Invocation.method(#getAllCustomers, []),
          returnValue: Future<
                  _i2.Either<_i5.CustomerFailure, List<_i6.Customer>>>.value(
              _FakeEither_0<_i5.CustomerFailure, List<_i6.Customer>>())) as _i4
          .Future<_i2.Either<_i5.CustomerFailure, List<_i6.Customer>>>);
  @override
  _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>> putCustomer(
          {_i6.Customer? customer}) =>
      (super.noSuchMethod(
              Invocation.method(#putCustomer, [], {#customer: customer}),
              returnValue:
                  Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>.value(
                      _FakeEither_0<_i5.CustomerFailure, _i6.Customer>()))
          as _i4.Future<_i2.Either<_i5.CustomerFailure, _i6.Customer>>);
}
